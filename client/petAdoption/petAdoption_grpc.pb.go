// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: petAdoption.proto

package petAdoption

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PetAdoption_InsertPet_FullMethodName = "/petAdoption.PetAdoption/InsertPet"
	PetAdoption_SearchPet_FullMethodName = "/petAdoption.PetAdoption/SearchPet"
)

// PetAdoptionClient is the client API for PetAdoption service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The PetAdoption service definition
type PetAdoptionClient interface {
	InsertPet(ctx context.Context, in *InsertPetRequest, opts ...grpc.CallOption) (*InsertPetResponse, error)
	SearchPet(ctx context.Context, in *SearchPetRequest, opts ...grpc.CallOption) (*SearchPetResponse, error)
}

type petAdoptionClient struct {
	cc grpc.ClientConnInterface
}

func NewPetAdoptionClient(cc grpc.ClientConnInterface) PetAdoptionClient {
	return &petAdoptionClient{cc}
}

func (c *petAdoptionClient) InsertPet(ctx context.Context, in *InsertPetRequest, opts ...grpc.CallOption) (*InsertPetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertPetResponse)
	err := c.cc.Invoke(ctx, PetAdoption_InsertPet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petAdoptionClient) SearchPet(ctx context.Context, in *SearchPetRequest, opts ...grpc.CallOption) (*SearchPetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPetResponse)
	err := c.cc.Invoke(ctx, PetAdoption_SearchPet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetAdoptionServer is the server API for PetAdoption service.
// All implementations must embed UnimplementedPetAdoptionServer
// for forward compatibility.
//
// The PetAdoption service definition
type PetAdoptionServer interface {
	InsertPet(context.Context, *InsertPetRequest) (*InsertPetResponse, error)
	SearchPet(context.Context, *SearchPetRequest) (*SearchPetResponse, error)
	mustEmbedUnimplementedPetAdoptionServer()
}

// UnimplementedPetAdoptionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPetAdoptionServer struct{}

func (UnimplementedPetAdoptionServer) InsertPet(context.Context, *InsertPetRequest) (*InsertPetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertPet not implemented")
}
func (UnimplementedPetAdoptionServer) SearchPet(context.Context, *SearchPetRequest) (*SearchPetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPet not implemented")
}
func (UnimplementedPetAdoptionServer) mustEmbedUnimplementedPetAdoptionServer() {}
func (UnimplementedPetAdoptionServer) testEmbeddedByValue()                     {}

// UnsafePetAdoptionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetAdoptionServer will
// result in compilation errors.
type UnsafePetAdoptionServer interface {
	mustEmbedUnimplementedPetAdoptionServer()
}

func RegisterPetAdoptionServer(s grpc.ServiceRegistrar, srv PetAdoptionServer) {
	// If the following call pancis, it indicates UnimplementedPetAdoptionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PetAdoption_ServiceDesc, srv)
}

func _PetAdoption_InsertPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetAdoptionServer).InsertPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetAdoption_InsertPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetAdoptionServer).InsertPet(ctx, req.(*InsertPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetAdoption_SearchPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetAdoptionServer).SearchPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetAdoption_SearchPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetAdoptionServer).SearchPet(ctx, req.(*SearchPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PetAdoption_ServiceDesc is the grpc.ServiceDesc for PetAdoption service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetAdoption_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petAdoption.PetAdoption",
	HandlerType: (*PetAdoptionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertPet",
			Handler:    _PetAdoption_InsertPet_Handler,
		},
		{
			MethodName: "SearchPet",
			Handler:    _PetAdoption_SearchPet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petAdoption.proto",
}
